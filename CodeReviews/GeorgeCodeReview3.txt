Author of Code Review: Erin George
Date of Code Review: 11/1/16
Sprint Number: 3
Name of .cs file: Mario.cs
Author of .cs file: John and Ricky (mainly)
Comments: This file starts off by declaring a lot of public variables. Maybe switch them to private or protected and then use properties within Mario Entity in order to access them. This will make sure these values are less likely to be accessed in methods that should not have access to them. In the OnInvincibilityEnded() method, maybe we should try to get rid of the if/else statements by using prevState. If UpdateInvincibilityStatus() is moved to Entity.cs, then Items can use it too because I am pretty sure that we update _secondsOfInvincibilityRemaining inside Items.cs. It would be nice to be able to use the same method to update the seconds. Inside the Update() method, I am confused as to why SetXVelocity(Vector2.Zero) is being called. Is this so that Mario only moves when you are pushing down the arrows (and doesn’t move continuously)? What is the difference between SetXVelocity(Vector2.Zero) and HaltX()? I think they are doing the same things so instead of using SetXVelocity(Vector2.Zero), we should stick to HaltX, or vice versa. By sticking to only one of these methods, then the code will be easier to read and edit because changes will only have to be made in either SetXVelocity or HaltX in order to achieve the same result. Since the OnCollideEnemy() method called Halt() but then updates position again, we should look into maybe using another method that performs an almost “bounce” functionality for when Mario bounces off an enemy. However, if this is the only spot that we use this bounce technique, it might be better to leave it as is. Also, the Vector2 used to update the position uses magic numbers, so get rid of those by defining a bounce vector at the top of the file. For the OnCollideItem() method, we should look into a way to not have to go through a lot of it/else statements in order to determine which action Mario should take. I am not sure how to do this off of the top of my head, but it would probably be something good to look into. Similar ot the UpdateInvincibilityStatus, we should think about moving SetInvincible() method in Entity.cs so that other entities can use the method as well. 
Number of minutes: 35min
Hypothetical Change: Although I already mentioned this above, I would suggest changing the location of the methods dealing with invincibility. With how our code is set up, this would be an easy change to make because Mario.cs inherits from Entity.cs and then in the other entities that would utilize these, we would just have to call the methods in the right locations.